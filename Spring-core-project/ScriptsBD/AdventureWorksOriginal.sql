-- ----------------------------------------------------------------------------
-- MySQL Workbench Migration
-- Migrated Schemata: AdventureWorks2014
-- Source Schemata: AdventureWorks2014
-- Created: Mon Apr 16 10:37:32 2018
-- Workbench Version: 6.3.10
-- ----------------------------------------------------------------------------

SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------------------------------------------------------
-- Schema AdventureWorks2014
-- ----------------------------------------------------------------------------
DROP SCHEMA IF EXISTS `AdventureWorks2014` ;
CREATE SCHEMA IF NOT EXISTS `AdventureWorks2014` ;

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.DatabaseLog
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`DatabaseLog` (
  `DatabaseLogID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for DatabaseLog records.',
  `PostTime` DATETIME(6) NOT NULL COMMENT 'The date and time the DDL change occurred.',
  `DatabaseUser` VARCHAR(160) NOT NULL COMMENT 'The user who implemented the DDL change.',
  `Event` VARCHAR(160) NOT NULL COMMENT 'The type of DDL statement that was executed.',
  `Schema` VARCHAR(160) NULL COMMENT 'The schema to which the changed object belongs.',
  `Object` VARCHAR(160) NULL COMMENT 'The object that was changed by the DDL statment.',
  `TSQL` LONGTEXT CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'The exact Transact-SQL statement that was executed.',
  `XmlEvent` TEXT NOT NULL COMMENT 'The raw XML data generated by database trigger.',
  PRIMARY KEY (`DatabaseLogID`))
COMMENT = 'Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ErrorLog
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ErrorLog` (
  `ErrorLogID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ErrorLog records.',
  `ErrorTime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'The date and time at which the error occurred.',
  `UserName` VARCHAR(160) NOT NULL COMMENT 'The user who executed the batch in which the error occurred.',
  `ErrorNumber` INT NOT NULL COMMENT 'The error number of the error that occurred.',
  `ErrorSeverity` INT NULL COMMENT 'The severity of the error that occurred.',
  `ErrorState` INT NULL COMMENT 'The state number of the error that occurred.',
  `ErrorProcedure` VARCHAR(126) CHARACTER SET 'utf8mb4' NULL COMMENT 'The name of the stored procedure or trigger where the error occurred.',
  `ErrorLine` INT NULL COMMENT 'The line number at which the error occurred.',
  `ErrorMessage` VARCHAR(4000) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'The message text of the error that occurred.',
  PRIMARY KEY (`ErrorLogID`))
COMMENT = 'Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.AWBuildVersion
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`AWBuildVersion` (
  `SystemInformationID` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Primary key for AWBuildVersion records.',
  `Database Version` VARCHAR(25) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Version number of the database in 9.yy.mm.dd.00 format.',
  `VersionDate` DATETIME(6) NOT NULL COMMENT 'Date and time the record was last updated.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`SystemInformationID`))
COMMENT = 'Current version number of the AdventureWorks 2014 sample database. ';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Shift
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Shift` (
  `ShiftID` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Primary key for Shift records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Shift description.',
  `StartTime` TIME(6) NOT NULL COMMENT 'Shift start time.',
  `EndTime` TIME(6) NOT NULL COMMENT 'Shift end time.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ShiftID`),
  UNIQUE INDEX `AK_Shift_Name` (`Name` ASC),
  UNIQUE INDEX `AK_Shift_StartTime_EndTime` (`StartTime` ASC, `EndTime` ASC))
COMMENT = 'Work shift lookup table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Department
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Department` (
  `DepartmentID` SMALLINT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for Department records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Name of the department.',
  `GroupName` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Name of the group to which the department belongs.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`DepartmentID`),
  UNIQUE INDEX `AK_Department_Name` (`Name` ASC))
COMMENT = 'Lookup table containing the departments within the Adventure Works Cycles company.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Employee
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Employee` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.',
  `NationalIDNumber` VARCHAR(15) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Unique national identification number such as a social security number.',
  `LoginID` VARCHAR(256) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Network login.',
  `OrganizationNode` VARCHAR(255) NULL COMMENT 'Where the employee is located in corporate hierarchy.',
  `OrganizationLevel` SMALLINT NULL COMMENT 'The depth of the employee in the corporate hierarchy.',
  `JobTitle` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Work title such as Buyer or Sales Representative.',
  `BirthDate` DATE NOT NULL COMMENT 'Date of birth.',
  `MaritalStatus` CHAR(1) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'M = Married, S = Single',
  `Gender` CHAR(1) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'M = Male, F = Female',
  `HireDate` DATE NOT NULL COMMENT 'Employee hired on this date.',
  `SalariedFlag` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.',
  `VacationHours` SMALLINT NOT NULL DEFAULT 0 COMMENT 'Number of available vacation hours.',
  `SickLeaveHours` SMALLINT NOT NULL DEFAULT 0 COMMENT 'Number of available sick leave hours.',
  `CurrentFlag` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Inactive, 1 = Active',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`),
  INDEX `IX_Employee_OrganizationNode` (`OrganizationNode` ASC),
  INDEX `IX_Employee_OrganizationLevel_OrganizationNode` (`OrganizationLevel` ASC, `OrganizationNode` ASC),
  UNIQUE INDEX `AK_Employee_LoginID` (`LoginID`(255) ASC),
  UNIQUE INDEX `AK_Employee_NationalIDNumber` (`NationalIDNumber` ASC),
  UNIQUE INDEX `AK_Employee_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_Employee_Person_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Person` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Employee information such as salary, department, and title.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.EmployeeDepartmentHistory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`EmployeeDepartmentHistory` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Employee identification number. Foreign key to Employee.BusinessEntityID.',
  `DepartmentID` SMALLINT NOT NULL COMMENT 'Department in which the employee worked including currently. Foreign key to Department.DepartmentID.',
  `ShiftID` TINYINT UNSIGNED NOT NULL COMMENT 'Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.',
  `StartDate` DATE NOT NULL COMMENT 'Date the employee started work in the department.',
  `EndDate` DATE NULL COMMENT 'Date the employee left the department. NULL = Current department.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`, `StartDate`, `DepartmentID`, `ShiftID`),
  INDEX `IX_EmployeeDepartmentHistory_DepartmentID` (`DepartmentID` ASC),
  INDEX `IX_EmployeeDepartmentHistory_ShiftID` (`ShiftID` ASC),
  CONSTRAINT `FK_EmployeeDepartmentHistory_Department_DepartmentID`
    FOREIGN KEY (`DepartmentID`)
    REFERENCES `AdventureWorks2014`.`Department` (`DepartmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_EmployeeDepartmentHistory_Employee_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Employee` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_EmployeeDepartmentHistory_Shift_ShiftID`
    FOREIGN KEY (`ShiftID`)
    REFERENCES `AdventureWorks2014`.`Shift` (`ShiftID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Employee department transfers.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.EmployeePayHistory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`EmployeePayHistory` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Employee identification number. Foreign key to Employee.BusinessEntityID.',
  `RateChangeDate` DATETIME(6) NOT NULL COMMENT 'Date the change in pay is effective',
  `Rate` DECIMAL(19,4) NOT NULL COMMENT 'Salary hourly rate.',
  `PayFrequency` TINYINT UNSIGNED NOT NULL COMMENT '1 = Salary received monthly, 2 = Salary received biweekly',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`, `RateChangeDate`),
  CONSTRAINT `FK_EmployeePayHistory_Employee_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Employee` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Employee pay history.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.JobCandidate
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`JobCandidate` (
  `JobCandidateID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for JobCandidate records.',
  `BusinessEntityID` INT NULL COMMENT 'Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.',
  `Resume` TEXT NULL COMMENT 'Résumé in XML format.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`JobCandidateID`),
  INDEX `IX_JobCandidate_BusinessEntityID` (`BusinessEntityID` ASC),
  CONSTRAINT `FK_JobCandidate_Employee_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Employee` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Résumés submitted to Human Resources by job applicants.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Address
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Address` (
  `AddressID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for Address records.',
  `AddressLine1` VARCHAR(60) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'First street address line.',
  `AddressLine2` VARCHAR(60) CHARACTER SET 'utf8mb4' NULL COMMENT 'Second street address line.',
  `City` VARCHAR(30) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Name of the city.',
  `StateProvinceID` INT NOT NULL COMMENT 'Unique identification number for the state or province. Foreign key to StateProvince table.',
  `PostalCode` VARCHAR(15) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Postal code for the street address.',
  `SpatialLocation` GEOMETRY NULL COMMENT 'Latitude and longitude of this address.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`AddressID`),
  UNIQUE INDEX `AK_Address_rowguid` (`rowguid` ASC),
  UNIQUE INDEX `IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_Post1` (`AddressLine1` ASC, `AddressLine2` ASC, `City` ASC, `StateProvinceID` ASC, `PostalCode` ASC),
  INDEX `IX_Address_StateProvinceID` (`StateProvinceID` ASC),
  CONSTRAINT `FK_Address_StateProvince_StateProvinceID`
    FOREIGN KEY (`StateProvinceID`)
    REFERENCES `AdventureWorks2014`.`StateProvince` (`StateProvinceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Street address information for customers, employees, and vendors.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.AddressType
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`AddressType` (
  `AddressTypeID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for AddressType records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Address type description. For example, Billing, Home, or Shipping.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`AddressTypeID`),
  UNIQUE INDEX `AK_AddressType_rowguid` (`rowguid` ASC),
  UNIQUE INDEX `AK_AddressType_Name` (`Name` ASC))
COMMENT = 'Types of addresses stored in the Address table. ';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.StateProvince
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`StateProvince` (
  `StateProvinceID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for StateProvince records.',
  `StateProvinceCode` CHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'ISO standard state or province code.',
  `CountryRegionCode` VARCHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. ',
  `IsOnlyStateProvinceFlag` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'State or province description.',
  `TerritoryID` INT NOT NULL COMMENT 'ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`StateProvinceID`),
  UNIQUE INDEX `AK_StateProvince_Name` (`Name` ASC),
  UNIQUE INDEX `AK_StateProvince_StateProvinceCode_CountryRegionCode` (`StateProvinceCode` ASC, `CountryRegionCode` ASC),
  UNIQUE INDEX `AK_StateProvince_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_StateProvince_CountryRegion_CountryRegionCode`
    FOREIGN KEY (`CountryRegionCode`)
    REFERENCES `AdventureWorks2014`.`CountryRegion` (`CountryRegionCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_StateProvince_SalesTerritory_TerritoryID`
    FOREIGN KEY (`TerritoryID`)
    REFERENCES `AdventureWorks2014`.`SalesTerritory` (`TerritoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'State and province lookup table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.BusinessEntity
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`BusinessEntity` (
  `BusinessEntityID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for all customers, vendors, and employees.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`),
  UNIQUE INDEX `AK_BusinessEntity_rowguid` (`rowguid` ASC))
COMMENT = 'Source of the ID that connects vendors, customers, and employees with address and contact information.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.BusinessEntityAddress
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`BusinessEntityAddress` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key. Foreign key to BusinessEntity.BusinessEntityID.',
  `AddressID` INT NOT NULL COMMENT 'Primary key. Foreign key to Address.AddressID.',
  `AddressTypeID` INT NOT NULL COMMENT 'Primary key. Foreign key to AddressType.AddressTypeID.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`, `AddressID`, `AddressTypeID`),
  UNIQUE INDEX `AK_BusinessEntityAddress_rowguid` (`rowguid` ASC),
  INDEX `IX_BusinessEntityAddress_AddressID` (`AddressID` ASC),
  INDEX `IX_BusinessEntityAddress_AddressTypeID` (`AddressTypeID` ASC),
  CONSTRAINT `FK_BusinessEntityAddress_Address_AddressID`
    FOREIGN KEY (`AddressID`)
    REFERENCES `AdventureWorks2014`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_BusinessEntityAddress_AddressType_AddressTypeID`
    FOREIGN KEY (`AddressTypeID`)
    REFERENCES `AdventureWorks2014`.`AddressType` (`AddressTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`BusinessEntity` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping customers, vendors, and employees to their addresses.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.BusinessEntityContact
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`BusinessEntityContact` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key. Foreign key to BusinessEntity.BusinessEntityID.',
  `PersonID` INT NOT NULL COMMENT 'Primary key. Foreign key to Person.BusinessEntityID.',
  `ContactTypeID` INT NOT NULL COMMENT 'Primary key.  Foreign key to ContactType.ContactTypeID.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`, `PersonID`, `ContactTypeID`),
  UNIQUE INDEX `AK_BusinessEntityContact_rowguid` (`rowguid` ASC),
  INDEX `IX_BusinessEntityContact_PersonID` (`PersonID` ASC),
  INDEX `IX_BusinessEntityContact_ContactTypeID` (`ContactTypeID` ASC),
  CONSTRAINT `FK_BusinessEntityContact_Person_PersonID`
    FOREIGN KEY (`PersonID`)
    REFERENCES `AdventureWorks2014`.`Person` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_BusinessEntityContact_ContactType_ContactTypeID`
    FOREIGN KEY (`ContactTypeID`)
    REFERENCES `AdventureWorks2014`.`ContactType` (`ContactTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_BusinessEntityContact_BusinessEntity_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`BusinessEntity` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping stores, vendors, and employees to people';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ContactType
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ContactType` (
  `ContactTypeID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ContactType records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Contact type description.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ContactTypeID`),
  UNIQUE INDEX `AK_ContactType_Name` (`Name` ASC))
COMMENT = 'Lookup table containing the types of business entity contacts.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.CountryRegion
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`CountryRegion` (
  `CountryRegionCode` VARCHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'ISO standard code for countries and regions.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Country or region name.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`CountryRegionCode`),
  UNIQUE INDEX `AK_CountryRegion_Name` (`Name` ASC))
COMMENT = 'Lookup table containing the ISO standard codes for countries and regions.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.EmailAddress
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`EmailAddress` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID',
  `EmailAddressID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key. ID of this email address.',
  `EmailAddress` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL COMMENT 'E-mail address for the person.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`EmailAddressID`, `BusinessEntityID`),
  INDEX `IX_EmailAddress_EmailAddress` (`EmailAddress` ASC),
  CONSTRAINT `FK_EmailAddress_Person_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Person` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Where to send a person email.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Password
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Password` (
  `BusinessEntityID` INT NOT NULL,
  `PasswordHash` VARCHAR(128) NOT NULL COMMENT 'Password for the e-mail account.',
  `PasswordSalt` VARCHAR(10) NOT NULL COMMENT 'Random value concatenated with the password string before the password is hashed.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`),
  CONSTRAINT `FK_Password_Person_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Person` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'One way hashed authentication information';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Person
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Person` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key for Person records.',
  `PersonType` CHAR(2) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact',
  `NameStyle` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.',
  `Title` VARCHAR(8) CHARACTER SET 'utf8mb4' NULL COMMENT 'A courtesy title. For example, Mr. or Ms.',
  `FirstName` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'First name of the person.',
  `MiddleName` VARCHAR(100) CHARACTER SET 'utf8mb4' NULL COMMENT 'Middle name or middle initial of the person.',
  `LastName` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Last name of the person.',
  `Suffix` VARCHAR(10) CHARACTER SET 'utf8mb4' NULL COMMENT 'Surname suffix. For example, Sr. or Jr.',
  `EmailPromotion` INT NOT NULL DEFAULT 0 COMMENT '0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. ',
  `AdditionalContactInfo` TEXT NULL COMMENT 'Additional contact information about the person stored in xml format. ',
  `Demographics` TEXT NULL COMMENT 'Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`),
  INDEX `IX_Person_LastName_FirstName_MiddleName` (`LastName` ASC, `FirstName` ASC, `MiddleName` ASC),
  UNIQUE INDEX `AK_Person_rowguid` (`rowguid` ASC),
  INDEX `PXML_Person_AddContact` (`AdditionalContactInfo`(255) ASC),
  INDEX `PXML_Person_Demographics` (`Demographics`(255) ASC),
  INDEX `XMLPATH_Person_Demographics` (`Demographics`(255) ASC),
  INDEX `XMLPROPERTY_Person_Demographics` (`Demographics`(255) ASC),
  INDEX `XMLVALUE_Person_Demographics` (`Demographics`(255) ASC),
  CONSTRAINT `FK_Person_BusinessEntity_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`BusinessEntity` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.PersonPhone
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`PersonPhone` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Business entity identification number. Foreign key to Person.BusinessEntityID.',
  `PhoneNumber` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Telephone number identification number.',
  `PhoneNumberTypeID` INT NOT NULL COMMENT 'Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`, `PhoneNumber`, `PhoneNumberTypeID`),
  INDEX `IX_PersonPhone_PhoneNumber` (`PhoneNumber` ASC),
  CONSTRAINT `FK_PersonPhone_Person_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Person` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID`
    FOREIGN KEY (`PhoneNumberTypeID`)
    REFERENCES `AdventureWorks2014`.`PhoneNumberType` (`PhoneNumberTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Telephone number and type of a person.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.PhoneNumberType
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`PhoneNumberType` (
  `PhoneNumberTypeID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for telephone number type records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Name of the telephone number type',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`PhoneNumberTypeID`))
COMMENT = 'Type of phone number of a person.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ScrapReason
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ScrapReason` (
  `ScrapReasonID` SMALLINT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ScrapReason records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Failure description.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ScrapReasonID`),
  UNIQUE INDEX `AK_ScrapReason_Name` (`Name` ASC))
COMMENT = 'Manufacturing failure reasons lookup table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductCategory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductCategory` (
  `ProductCategoryID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ProductCategory records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Category description.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductCategoryID`),
  UNIQUE INDEX `AK_ProductCategory_Name` (`Name` ASC),
  UNIQUE INDEX `AK_ProductCategory_rowguid` (`rowguid` ASC))
COMMENT = 'High-level product categorization.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductCostHistory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductCostHistory` (
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID',
  `StartDate` DATETIME(6) NOT NULL COMMENT 'Product cost start date.',
  `EndDate` DATETIME(6) NULL COMMENT 'Product cost end date.',
  `StandardCost` DECIMAL(19,4) NOT NULL COMMENT 'Standard cost of the product.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductID`, `StartDate`),
  CONSTRAINT `FK_ProductCostHistory_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Changes in the cost of a product over time.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductDescription
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductDescription` (
  `ProductDescriptionID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ProductDescription records.',
  `Description` VARCHAR(400) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Description of the product.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductDescriptionID`),
  UNIQUE INDEX `AK_ProductDescription_rowguid` (`rowguid` ASC))
COMMENT = 'Product descriptions in several languages.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductDocument
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductDocument` (
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `DocumentNode` VARCHAR(255) NOT NULL COMMENT 'Document identification number. Foreign key to Document.DocumentNode.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductID`, `DocumentNode`),
  CONSTRAINT `FK_ProductDocument_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ProductDocument_Document_DocumentNode`
    FOREIGN KEY (`DocumentNode`)
    REFERENCES `AdventureWorks2014`.`Document` (`DocumentNode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping products to related product documents.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductInventory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductInventory` (
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `LocationID` SMALLINT NOT NULL COMMENT 'Inventory location identification number. Foreign key to Location.LocationID. ',
  `Shelf` VARCHAR(10) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Storage compartment within an inventory location.',
  `Bin` TINYINT UNSIGNED NOT NULL COMMENT 'Storage container on a shelf in an inventory location.',
  `Quantity` SMALLINT NOT NULL DEFAULT 0 COMMENT 'Quantity of products in the inventory location.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductID`, `LocationID`),
  CONSTRAINT `FK_ProductInventory_Location_LocationID`
    FOREIGN KEY (`LocationID`)
    REFERENCES `AdventureWorks2014`.`Location` (`LocationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ProductInventory_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Product inventory information.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductListPriceHistory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductListPriceHistory` (
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID',
  `StartDate` DATETIME(6) NOT NULL COMMENT 'List price start date.',
  `EndDate` DATETIME(6) NULL COMMENT 'List price end date',
  `ListPrice` DECIMAL(19,4) NOT NULL COMMENT 'Product list price.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductID`, `StartDate`),
  CONSTRAINT `FK_ProductListPriceHistory_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Changes in the list price of a product over time.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductModel
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductModel` (
  `ProductModelID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ProductModel records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Product model description.',
  `CatalogDescription` TEXT NULL COMMENT 'Detailed product catalog information in xml format.',
  `Instructions` TEXT NULL COMMENT 'Manufacturing instructions in xml format.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductModelID`),
  UNIQUE INDEX `AK_ProductModel_Name` (`Name` ASC),
  UNIQUE INDEX `AK_ProductModel_rowguid` (`rowguid` ASC),
  INDEX `PXML_ProductModel_CatalogDescription` (`CatalogDescription`(255) ASC),
  INDEX `PXML_ProductModel_Instructions` (`Instructions`(255) ASC))
COMMENT = 'Product model classification.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductModelIllustration
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductModelIllustration` (
  `ProductModelID` INT NOT NULL COMMENT 'Primary key. Foreign key to ProductModel.ProductModelID.',
  `IllustrationID` INT NOT NULL COMMENT 'Primary key. Foreign key to Illustration.IllustrationID.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductModelID`, `IllustrationID`),
  CONSTRAINT `FK_ProductModelIllustration_ProductModel_ProductModelID`
    FOREIGN KEY (`ProductModelID`)
    REFERENCES `AdventureWorks2014`.`ProductModel` (`ProductModelID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ProductModelIllustration_Illustration_IllustrationID`
    FOREIGN KEY (`IllustrationID`)
    REFERENCES `AdventureWorks2014`.`Illustration` (`IllustrationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping product models and illustrations.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductModelProductDescriptionCulture
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductModelProductDescriptionCulture` (
  `ProductModelID` INT NOT NULL COMMENT 'Primary key. Foreign key to ProductModel.ProductModelID.',
  `ProductDescriptionID` INT NOT NULL COMMENT 'Primary key. Foreign key to ProductDescription.ProductDescriptionID.',
  `CultureID` CHAR(6) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Culture identification number. Foreign key to Culture.CultureID.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductModelID`, `ProductDescriptionID`, `CultureID`),
  CONSTRAINT `FK_ProductModelProductDescriptionCulture_ProductDescription_Pr3`
    FOREIGN KEY (`ProductDescriptionID`)
    REFERENCES `AdventureWorks2014`.`ProductDescription` (`ProductDescriptionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ProductModelProductDescriptionCulture_Culture_CultureID`
    FOREIGN KEY (`CultureID`)
    REFERENCES `AdventureWorks2014`.`Culture` (`CultureID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ProductModelProductDescriptionCulture_ProductModel_ProductM4`
    FOREIGN KEY (`ProductModelID`)
    REFERENCES `AdventureWorks2014`.`ProductModel` (`ProductModelID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping product descriptions and the language the description is written in.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.BillOfMaterials
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`BillOfMaterials` (
  `BillOfMaterialsID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for BillOfMaterials records.',
  `ProductAssemblyID` INT NULL COMMENT 'Parent product identification number. Foreign key to Product.ProductID.',
  `ComponentID` INT NOT NULL COMMENT 'Component identification number. Foreign key to Product.ProductID.',
  `StartDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date the component started being used in the assembly item.',
  `EndDate` DATETIME(6) NULL COMMENT 'Date the component stopped being used in the assembly item.',
  `UnitMeasureCode` CHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Standard code identifying the unit of measure for the quantity.',
  `BOMLevel` SMALLINT NOT NULL COMMENT 'Indicates the depth the component is from its parent (AssemblyID).',
  `PerAssemblyQty` DECIMAL(8,2) NOT NULL DEFAULT 1.00 COMMENT 'Quantity of the component needed to create the assembly.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BillOfMaterialsID`),
  UNIQUE INDEX `AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate` (`ProductAssemblyID` ASC, `ComponentID` ASC, `StartDate` ASC),
  INDEX `IX_BillOfMaterials_UnitMeasureCode` (`UnitMeasureCode` ASC),
  CONSTRAINT `FK_BillOfMaterials_Product_ProductAssemblyID`
    FOREIGN KEY (`ProductAssemblyID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_BillOfMaterials_Product_ComponentID`
    FOREIGN KEY (`ComponentID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_BillOfMaterials_UnitMeasure_UnitMeasureCode`
    FOREIGN KEY (`UnitMeasureCode`)
    REFERENCES `AdventureWorks2014`.`UnitMeasure` (`UnitMeasureCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductPhoto
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductPhoto` (
  `ProductPhotoID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ProductPhoto records.',
  `ThumbNailPhoto` LONGBLOB NULL COMMENT 'Small image of the product.',
  `ThumbnailPhotoFileName` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL COMMENT 'Small image file name.',
  `LargePhoto` LONGBLOB NULL COMMENT 'Large image of the product.',
  `LargePhotoFileName` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL COMMENT 'Large image file name.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductPhotoID`))
COMMENT = 'Product images.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductProductPhoto
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductProductPhoto` (
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `ProductPhotoID` INT NOT NULL COMMENT 'Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.',
  `Primary` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0 = Photo is not the principal image. 1 = Photo is the principal image.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductID`, `ProductPhotoID`),
  CONSTRAINT `FK_ProductProductPhoto_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ProductProductPhoto_ProductPhoto_ProductPhotoID`
    FOREIGN KEY (`ProductPhotoID`)
    REFERENCES `AdventureWorks2014`.`ProductPhoto` (`ProductPhotoID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping products and product photos.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.TransactionHistory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`TransactionHistory` (
  `TransactionID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for TransactionHistory records.',
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `ReferenceOrderID` INT NOT NULL COMMENT 'Purchase order, sales order, or work order identification number.',
  `ReferenceOrderLineID` INT NOT NULL DEFAULT 0 COMMENT 'Line number associated with the purchase order, sales order, or work order.',
  `TransactionDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the transaction.',
  `TransactionType` CHAR(1) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'W = WorkOrder, S = SalesOrder, P = PurchaseOrder',
  `Quantity` INT NOT NULL COMMENT 'Product quantity.',
  `ActualCost` DECIMAL(19,4) NOT NULL COMMENT 'Product cost.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`TransactionID`),
  INDEX `IX_TransactionHistory_ProductID` (`ProductID` ASC),
  INDEX `IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID` (`ReferenceOrderID` ASC, `ReferenceOrderLineID` ASC),
  CONSTRAINT `FK_TransactionHistory_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Record of each purchase order, sales order, or work order transaction year to date.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductReview
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductReview` (
  `ProductReviewID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ProductReview records.',
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `ReviewerName` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Name of the reviewer.',
  `ReviewDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date review was submitted.',
  `EmailAddress` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Reviewer\'s e-mail address.',
  `Rating` INT NOT NULL COMMENT 'Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.',
  `Comments` VARCHAR(3850) CHARACTER SET 'utf8mb4' NULL COMMENT 'Reviewer\'s comments',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductReviewID`),
  INDEX `IX_ProductReview_ProductID_Name` (`ProductID` ASC, `ReviewerName` ASC, `Comments`(255) ASC),
  CONSTRAINT `FK_ProductReview_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Customer reviews of products they have purchased.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.TransactionHistoryArchive
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`TransactionHistoryArchive` (
  `TransactionID` INT NOT NULL COMMENT 'Primary key for TransactionHistoryArchive records.',
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `ReferenceOrderID` INT NOT NULL COMMENT 'Purchase order, sales order, or work order identification number.',
  `ReferenceOrderLineID` INT NOT NULL DEFAULT 0 COMMENT 'Line number associated with the purchase order, sales order, or work order.',
  `TransactionDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the transaction.',
  `TransactionType` CHAR(1) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'W = Work Order, S = Sales Order, P = Purchase Order',
  `Quantity` INT NOT NULL COMMENT 'Product quantity.',
  `ActualCost` DECIMAL(19,4) NOT NULL COMMENT 'Product cost.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`TransactionID`),
  INDEX `IX_TransactionHistoryArchive_ProductID` (`ProductID` ASC),
  INDEX `IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLi2` (`ReferenceOrderID` ASC, `ReferenceOrderLineID` ASC))
COMMENT = 'Transactions for previous years.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductSubcategory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductSubcategory` (
  `ProductSubcategoryID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ProductSubcategory records.',
  `ProductCategoryID` INT NOT NULL COMMENT 'Product category identification number. Foreign key to ProductCategory.ProductCategoryID.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Subcategory description.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductSubcategoryID`),
  UNIQUE INDEX `AK_ProductSubcategory_Name` (`Name` ASC),
  UNIQUE INDEX `AK_ProductSubcategory_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_ProductSubcategory_ProductCategory_ProductCategoryID`
    FOREIGN KEY (`ProductCategoryID`)
    REFERENCES `AdventureWorks2014`.`ProductCategory` (`ProductCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Product subcategories. See ProductCategory table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.UnitMeasure
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`UnitMeasure` (
  `UnitMeasureCode` CHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Primary key.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Unit of measure description.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`UnitMeasureCode`),
  UNIQUE INDEX `AK_UnitMeasure_Name` (`Name` ASC))
COMMENT = 'Unit of measure lookup table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.WorkOrder
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`WorkOrder` (
  `WorkOrderID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for WorkOrder records.',
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `OrderQty` INT NOT NULL COMMENT 'Product quantity to build.',
  `StockedQty` INT NOT NULL COMMENT 'Quantity built and put in inventory.',
  `ScrappedQty` SMALLINT NOT NULL COMMENT 'Quantity that failed inspection.',
  `StartDate` DATETIME(6) NOT NULL COMMENT 'Work order start date.',
  `EndDate` DATETIME(6) NULL COMMENT 'Work order end date.',
  `DueDate` DATETIME(6) NOT NULL COMMENT 'Work order due date.',
  `ScrapReasonID` SMALLINT NULL COMMENT 'Reason for inspection failure.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`WorkOrderID`),
  INDEX `IX_WorkOrder_ScrapReasonID` (`ScrapReasonID` ASC),
  INDEX `IX_WorkOrder_ProductID` (`ProductID` ASC),
  CONSTRAINT `FK_WorkOrder_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_WorkOrder_ScrapReason_ScrapReasonID`
    FOREIGN KEY (`ScrapReasonID`)
    REFERENCES `AdventureWorks2014`.`ScrapReason` (`ScrapReasonID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Manufacturing work orders.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Culture
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Culture` (
  `CultureID` CHAR(6) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Primary key for Culture records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Culture description.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`CultureID`),
  UNIQUE INDEX `AK_Culture_Name` (`Name` ASC))
COMMENT = 'Lookup table containing the languages in which some AdventureWorks data is stored.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.WorkOrderRouting
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`WorkOrderRouting` (
  `WorkOrderID` INT NOT NULL COMMENT 'Primary key. Foreign key to WorkOrder.WorkOrderID.',
  `ProductID` INT NOT NULL COMMENT 'Primary key. Foreign key to Product.ProductID.',
  `OperationSequence` SMALLINT NOT NULL COMMENT 'Primary key. Indicates the manufacturing process sequence.',
  `LocationID` SMALLINT NOT NULL COMMENT 'Manufacturing location where the part is processed. Foreign key to Location.LocationID.',
  `ScheduledStartDate` DATETIME(6) NOT NULL COMMENT 'Planned manufacturing start date.',
  `ScheduledEndDate` DATETIME(6) NOT NULL COMMENT 'Planned manufacturing end date.',
  `ActualStartDate` DATETIME(6) NULL COMMENT 'Actual start date.',
  `ActualEndDate` DATETIME(6) NULL COMMENT 'Actual end date.',
  `ActualResourceHrs` DECIMAL(9,4) NULL COMMENT 'Number of manufacturing hours used.',
  `PlannedCost` DECIMAL(19,4) NOT NULL COMMENT 'Estimated manufacturing cost.',
  `ActualCost` DECIMAL(19,4) NULL COMMENT 'Actual manufacturing cost.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`WorkOrderID`, `ProductID`, `OperationSequence`),
  INDEX `IX_WorkOrderRouting_ProductID` (`ProductID` ASC),
  CONSTRAINT `FK_WorkOrderRouting_Location_LocationID`
    FOREIGN KEY (`LocationID`)
    REFERENCES `AdventureWorks2014`.`Location` (`LocationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_WorkOrderRouting_WorkOrder_WorkOrderID`
    FOREIGN KEY (`WorkOrderID`)
    REFERENCES `AdventureWorks2014`.`WorkOrder` (`WorkOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Work order details.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Document
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Document` (
  `DocumentNode` VARCHAR(255) NOT NULL COMMENT 'Primary key for Document records.',
  `DocumentLevel` SMALLINT NULL COMMENT 'Depth in the document hierarchy.',
  `Title` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Title of the document.',
  `Owner` INT NOT NULL COMMENT 'Employee who controls the document.  Foreign key to Employee.BusinessEntityID',
  `FolderFlag` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0 = This is a folder, 1 = This is a document.',
  `FileName` VARCHAR(400) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'File name of the document',
  `FileExtension` VARCHAR(8) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'File extension indicating the document type. For example, .doc or .txt.',
  `Revision` CHAR(5) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Revision number of the document. ',
  `ChangeNumber` INT NOT NULL DEFAULT 0 COMMENT 'Engineering change approval number.',
  `Status` TINYINT UNSIGNED NOT NULL COMMENT '1 = Pending approval, 2 = Approved, 3 = Obsolete',
  `DocumentSummary` LONGTEXT CHARACTER SET 'utf8mb4' NULL COMMENT 'Document abstract.',
  `Document` LONGBLOB NULL COMMENT 'Complete document.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Required for FileStream.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`DocumentNode`),
  UNIQUE INDEX `UQ__Document__F73921F763026E5E` (`rowguid` ASC),
  UNIQUE INDEX `AK_Document_DocumentLevel_DocumentNode` (`DocumentLevel` ASC, `DocumentNode` ASC),
  UNIQUE INDEX `AK_Document_rowguid` (`rowguid` ASC),
  INDEX `IX_Document_FileName_Revision` (`FileName`(255) ASC, `Revision` ASC),
  CONSTRAINT `FK_Document_Employee_Owner`
    FOREIGN KEY (`Owner`)
    REFERENCES `AdventureWorks2014`.`Employee` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Product maintenance documents.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Illustration
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Illustration` (
  `IllustrationID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for Illustration records.',
  `Diagram` TEXT NULL COMMENT 'Illustrations used in manufacturing instructions. Stored as XML.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`IllustrationID`))
COMMENT = 'Bicycle assembly diagrams.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Location
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Location` (
  `LocationID` SMALLINT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for Location records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Location description.',
  `CostRate` DECIMAL(10,4) NOT NULL DEFAULT 0.00 COMMENT 'Standard hourly cost of the manufacturing location.',
  `Availability` DECIMAL(8,2) NOT NULL DEFAULT 0.00 COMMENT 'Work capacity (in hours) of the manufacturing location.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`LocationID`),
  UNIQUE INDEX `AK_Location_Name` (`Name` ASC))
COMMENT = 'Product inventory and manufacturing locations.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Product
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Product` (
  `ProductID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for Product records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Name of the product.',
  `ProductNumber` VARCHAR(25) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Unique product identification number.',
  `MakeFlag` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Product is purchased, 1 = Product is manufactured in-house.',
  `FinishedGoodsFlag` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Product is not a salable item. 1 = Product is salable.',
  `Color` VARCHAR(15) CHARACTER SET 'utf8mb4' NULL COMMENT 'Product color.',
  `SafetyStockLevel` SMALLINT NOT NULL COMMENT 'Minimum inventory quantity. ',
  `ReorderPoint` SMALLINT NOT NULL COMMENT 'Inventory level that triggers a purchase order or work order. ',
  `StandardCost` DECIMAL(19,4) NOT NULL COMMENT 'Standard cost of the product.',
  `ListPrice` DECIMAL(19,4) NOT NULL COMMENT 'Selling price.',
  `Size` VARCHAR(5) CHARACTER SET 'utf8mb4' NULL COMMENT 'Product size.',
  `SizeUnitMeasureCode` CHAR(3) CHARACTER SET 'utf8mb4' NULL COMMENT 'Unit of measure for Size column.',
  `WeightUnitMeasureCode` CHAR(3) CHARACTER SET 'utf8mb4' NULL COMMENT 'Unit of measure for Weight column.',
  `Weight` DECIMAL(8,2) NULL COMMENT 'Product weight.',
  `DaysToManufacture` INT NOT NULL COMMENT 'Number of days required to manufacture the product.',
  `ProductLine` CHAR(2) CHARACTER SET 'utf8mb4' NULL COMMENT 'R = Road, M = Mountain, T = Touring, S = Standard',
  `Class` CHAR(2) CHARACTER SET 'utf8mb4' NULL COMMENT 'H = High, M = Medium, L = Low',
  `Style` CHAR(2) CHARACTER SET 'utf8mb4' NULL COMMENT 'W = Womens, M = Mens, U = Universal',
  `ProductSubcategoryID` INT NULL COMMENT 'Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. ',
  `ProductModelID` INT NULL COMMENT 'Product is a member of this product model. Foreign key to ProductModel.ProductModelID.',
  `SellStartDate` DATETIME(6) NOT NULL COMMENT 'Date the product was available for sale.',
  `SellEndDate` DATETIME(6) NULL COMMENT 'Date the product was no longer available for sale.',
  `DiscontinuedDate` DATETIME(6) NULL COMMENT 'Date the product was discontinued.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductID`),
  UNIQUE INDEX `AK_Product_ProductNumber` (`ProductNumber` ASC),
  UNIQUE INDEX `AK_Product_Name` (`Name` ASC),
  UNIQUE INDEX `AK_Product_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_Product_UnitMeasure_SizeUnitMeasureCode`
    FOREIGN KEY (`SizeUnitMeasureCode`)
    REFERENCES `AdventureWorks2014`.`UnitMeasure` (`UnitMeasureCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Product_UnitMeasure_WeightUnitMeasureCode`
    FOREIGN KEY (`WeightUnitMeasureCode`)
    REFERENCES `AdventureWorks2014`.`UnitMeasure` (`UnitMeasureCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Product_ProductModel_ProductModelID`
    FOREIGN KEY (`ProductModelID`)
    REFERENCES `AdventureWorks2014`.`ProductModel` (`ProductModelID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Product_ProductSubcategory_ProductSubcategoryID`
    FOREIGN KEY (`ProductSubcategoryID`)
    REFERENCES `AdventureWorks2014`.`ProductSubcategory` (`ProductSubcategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Products sold or used in the manfacturing of sold products.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ShipMethod
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ShipMethod` (
  `ShipMethodID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ShipMethod records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Shipping company name.',
  `ShipBase` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Minimum shipping charge.',
  `ShipRate` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Shipping charge per pound.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ShipMethodID`),
  UNIQUE INDEX `AK_ShipMethod_Name` (`Name` ASC),
  UNIQUE INDEX `AK_ShipMethod_rowguid` (`rowguid` ASC))
COMMENT = 'Shipping company lookup table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ProductVendor
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ProductVendor` (
  `ProductID` INT NOT NULL COMMENT 'Primary key. Foreign key to Product.ProductID.',
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key. Foreign key to Vendor.BusinessEntityID.',
  `AverageLeadTime` INT NOT NULL COMMENT 'The average span of time (in days) between placing an order with the vendor and receiving the purchased product.',
  `StandardPrice` DECIMAL(19,4) NOT NULL COMMENT 'The vendor\'s usual selling price.',
  `LastReceiptCost` DECIMAL(19,4) NULL COMMENT 'The selling price when last purchased.',
  `LastReceiptDate` DATETIME(6) NULL COMMENT 'Date the product was last received by the vendor.',
  `MinOrderQty` INT NOT NULL COMMENT 'The maximum quantity that should be ordered.',
  `MaxOrderQty` INT NOT NULL COMMENT 'The minimum quantity that should be ordered.',
  `OnOrderQty` INT NULL COMMENT 'The quantity currently on order.',
  `UnitMeasureCode` CHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'The product\'s unit of measure.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ProductID`, `BusinessEntityID`),
  INDEX `IX_ProductVendor_UnitMeasureCode` (`UnitMeasureCode` ASC),
  INDEX `IX_ProductVendor_BusinessEntityID` (`BusinessEntityID` ASC),
  CONSTRAINT `FK_ProductVendor_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ProductVendor_UnitMeasure_UnitMeasureCode`
    FOREIGN KEY (`UnitMeasureCode`)
    REFERENCES `AdventureWorks2014`.`UnitMeasure` (`UnitMeasureCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ProductVendor_Vendor_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Vendor` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping vendors with the products they supply.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Vendor
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Vendor` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID',
  `AccountNumber` VARCHAR(30) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Vendor account (identification) number.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Company name.',
  `CreditRating` TINYINT UNSIGNED NOT NULL COMMENT '1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average',
  `PreferredVendorStatus` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.',
  `ActiveFlag` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Vendor no longer used. 1 = Vendor is actively used.',
  `PurchasingWebServiceURL` VARCHAR(1024) CHARACTER SET 'utf8mb4' NULL COMMENT 'Vendor URL.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`),
  UNIQUE INDEX `AK_Vendor_AccountNumber` (`AccountNumber` ASC),
  CONSTRAINT `FK_Vendor_BusinessEntity_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`BusinessEntity` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Companies from whom Adventure Works Cycles purchases parts or other goods.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.PurchaseOrderDetail
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`PurchaseOrderDetail` (
  `PurchaseOrderID` INT NOT NULL COMMENT 'Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.',
  `PurchaseOrderDetailID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key. One line number per purchased product.',
  `DueDate` DATETIME(6) NOT NULL COMMENT 'Date the product is expected to be received.',
  `OrderQty` SMALLINT NOT NULL COMMENT 'Quantity ordered.',
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `UnitPrice` DECIMAL(19,4) NOT NULL COMMENT 'Vendor\'s selling price of a single product.',
  `LineTotal` DECIMAL(19,4) NOT NULL COMMENT 'Per product subtotal. Computed as OrderQty * UnitPrice.',
  `ReceivedQty` DECIMAL(8,2) NOT NULL COMMENT 'Quantity actually received from the vendor.',
  `RejectedQty` DECIMAL(8,2) NOT NULL COMMENT 'Quantity rejected during inspection.',
  `StockedQty` DECIMAL(9,2) NOT NULL COMMENT 'Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`PurchaseOrderDetailID`, `PurchaseOrderID`),
  INDEX `IX_PurchaseOrderDetail_ProductID` (`ProductID` ASC),
  CONSTRAINT `FK_PurchaseOrderDetail_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID`
    FOREIGN KEY (`PurchaseOrderID`)
    REFERENCES `AdventureWorks2014`.`PurchaseOrderHeader` (`PurchaseOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Individual products associated with a specific purchase order. See PurchaseOrderHeader.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.PurchaseOrderHeader
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`PurchaseOrderHeader` (
  `PurchaseOrderID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key.',
  `RevisionNumber` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Incremental number to track changes to the purchase order over time.',
  `Status` TINYINT UNSIGNED NOT NULL DEFAULT 1 COMMENT 'Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete',
  `EmployeeID` INT NOT NULL COMMENT 'Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.',
  `VendorID` INT NOT NULL COMMENT 'Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.',
  `ShipMethodID` INT NOT NULL COMMENT 'Shipping method. Foreign key to ShipMethod.ShipMethodID.',
  `OrderDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Purchase order creation date.',
  `ShipDate` DATETIME(6) NULL COMMENT 'Estimated shipment date from the vendor.',
  `SubTotal` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.',
  `TaxAmt` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Tax amount.',
  `Freight` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Shipping cost.',
  `TotalDue` DECIMAL(19,4) NOT NULL COMMENT 'Total due to vendor. Computed as Subtotal + TaxAmt + Freight.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`PurchaseOrderID`),
  INDEX `IX_PurchaseOrderHeader_VendorID` (`VendorID` ASC),
  INDEX `IX_PurchaseOrderHeader_EmployeeID` (`EmployeeID` ASC),
  CONSTRAINT `FK_PurchaseOrderHeader_Employee_EmployeeID`
    FOREIGN KEY (`EmployeeID`)
    REFERENCES `AdventureWorks2014`.`Employee` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_PurchaseOrderHeader_Vendor_VendorID`
    FOREIGN KEY (`VendorID`)
    REFERENCES `AdventureWorks2014`.`Vendor` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_PurchaseOrderHeader_ShipMethod_ShipMethodID`
    FOREIGN KEY (`ShipMethodID`)
    REFERENCES `AdventureWorks2014`.`ShipMethod` (`ShipMethodID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'General purchase order information. See PurchaseOrderDetail.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.ShoppingCartItem
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`ShoppingCartItem` (
  `ShoppingCartItemID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for ShoppingCartItem records.',
  `ShoppingCartID` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Shopping cart identification number.',
  `Quantity` INT NOT NULL DEFAULT 1 COMMENT 'Product quantity ordered.',
  `ProductID` INT NOT NULL COMMENT 'Product ordered. Foreign key to Product.ProductID.',
  `DateCreated` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date the time the record was created.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`ShoppingCartItemID`),
  INDEX `IX_ShoppingCartItem_ShoppingCartID_ProductID` (`ShoppingCartID` ASC, `ProductID` ASC),
  CONSTRAINT `FK_ShoppingCartItem_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Contains online customer orders until the order is submitted or cancelled.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SpecialOffer
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SpecialOffer` (
  `SpecialOfferID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for SpecialOffer records.',
  `Description` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Discount description.',
  `DiscountPct` DECIMAL(10,4) NOT NULL DEFAULT 0.00 COMMENT 'Discount precentage.',
  `Type` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Discount type category.',
  `Category` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Group the discount applies to such as Reseller or Customer.',
  `StartDate` DATETIME(6) NOT NULL COMMENT 'Discount start date.',
  `EndDate` DATETIME(6) NOT NULL COMMENT 'Discount end date.',
  `MinQty` INT NOT NULL DEFAULT 0 COMMENT 'Minimum discount percent allowed.',
  `MaxQty` INT NULL COMMENT 'Maximum discount percent allowed.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`SpecialOfferID`),
  UNIQUE INDEX `AK_SpecialOffer_rowguid` (`rowguid` ASC))
COMMENT = 'Sale discounts lookup table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SpecialOfferProduct
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SpecialOfferProduct` (
  `SpecialOfferID` INT NOT NULL COMMENT 'Primary key for SpecialOfferProduct records.',
  `ProductID` INT NOT NULL COMMENT 'Product identification number. Foreign key to Product.ProductID.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`SpecialOfferID`, `ProductID`),
  UNIQUE INDEX `AK_SpecialOfferProduct_rowguid` (`rowguid` ASC),
  INDEX `IX_SpecialOfferProduct_ProductID` (`ProductID` ASC),
  CONSTRAINT `FK_SpecialOfferProduct_Product_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `AdventureWorks2014`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID`
    FOREIGN KEY (`SpecialOfferID`)
    REFERENCES `AdventureWorks2014`.`SpecialOffer` (`SpecialOfferID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping products to special offer discounts.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Store
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Store` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key. Foreign key to Customer.BusinessEntityID.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Name of the store.',
  `SalesPersonID` INT NULL COMMENT 'ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.',
  `Demographics` TEXT NULL COMMENT 'Demographic informationg about the store such as the number of employees, annual sales and store type.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`),
  UNIQUE INDEX `AK_Store_rowguid` (`rowguid` ASC),
  INDEX `IX_Store_SalesPersonID` (`SalesPersonID` ASC),
  INDEX `PXML_Store_Demographics` (`Demographics`(255) ASC),
  CONSTRAINT `FK_Store_BusinessEntity_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`BusinessEntity` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Store_SalesPerson_SalesPersonID`
    FOREIGN KEY (`SalesPersonID`)
    REFERENCES `AdventureWorks2014`.`SalesPerson` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Customers (resellers) of Adventure Works products.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.CountryRegionCurrency
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`CountryRegionCurrency` (
  `CountryRegionCode` VARCHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.',
  `CurrencyCode` CHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'ISO standard currency code. Foreign key to Currency.CurrencyCode.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`CountryRegionCode`, `CurrencyCode`),
  INDEX `IX_CountryRegionCurrency_CurrencyCode` (`CurrencyCode` ASC),
  CONSTRAINT `FK_CountryRegionCurrency_CountryRegion_CountryRegionCode`
    FOREIGN KEY (`CountryRegionCode`)
    REFERENCES `AdventureWorks2014`.`CountryRegion` (`CountryRegionCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_CountryRegionCurrency_Currency_CurrencyCode`
    FOREIGN KEY (`CurrencyCode`)
    REFERENCES `AdventureWorks2014`.`Currency` (`CurrencyCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping ISO currency codes to a country or region.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.CreditCard
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`CreditCard` (
  `CreditCardID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for CreditCard records.',
  `CardType` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Credit card name.',
  `CardNumber` VARCHAR(25) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Credit card number.',
  `ExpMonth` TINYINT UNSIGNED NOT NULL COMMENT 'Credit card expiration month.',
  `ExpYear` SMALLINT NOT NULL COMMENT 'Credit card expiration year.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`CreditCardID`),
  UNIQUE INDEX `AK_CreditCard_CardNumber` (`CardNumber` ASC))
COMMENT = 'Customer credit card information.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Currency
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Currency` (
  `CurrencyCode` CHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'The ISO code for the Currency.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Currency name.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`CurrencyCode`),
  UNIQUE INDEX `AK_Currency_Name` (`Name` ASC))
COMMENT = 'Lookup table containing standard ISO currencies.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.CurrencyRate
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`CurrencyRate` (
  `CurrencyRateID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for CurrencyRate records.',
  `CurrencyRateDate` DATETIME(6) NOT NULL COMMENT 'Date and time the exchange rate was obtained.',
  `FromCurrencyCode` CHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Exchange rate was converted from this currency code.',
  `ToCurrencyCode` CHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Exchange rate was converted to this currency code.',
  `AverageRate` DECIMAL(19,4) NOT NULL COMMENT 'Average exchange rate for the day.',
  `EndOfDayRate` DECIMAL(19,4) NOT NULL COMMENT 'Final exchange rate for the day.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`CurrencyRateID`),
  UNIQUE INDEX `AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode` (`CurrencyRateDate` ASC, `FromCurrencyCode` ASC, `ToCurrencyCode` ASC),
  CONSTRAINT `FK_CurrencyRate_Currency_FromCurrencyCode`
    FOREIGN KEY (`FromCurrencyCode`)
    REFERENCES `AdventureWorks2014`.`Currency` (`CurrencyCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_CurrencyRate_Currency_ToCurrencyCode`
    FOREIGN KEY (`ToCurrencyCode`)
    REFERENCES `AdventureWorks2014`.`Currency` (`CurrencyCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Currency exchange rates.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.Customer
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`Customer` (
  `CustomerID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key.',
  `PersonID` INT NULL COMMENT 'Foreign key to Person.BusinessEntityID',
  `StoreID` INT NULL COMMENT 'Foreign key to Store.BusinessEntityID',
  `TerritoryID` INT NULL COMMENT 'ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.',
  `AccountNumber` VARCHAR(10) NOT NULL COMMENT 'Unique number identifying the customer assigned by the accounting system.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`CustomerID`),
  UNIQUE INDEX `AK_Customer_rowguid` (`rowguid` ASC),
  UNIQUE INDEX `AK_Customer_AccountNumber` (`AccountNumber` ASC),
  INDEX `IX_Customer_TerritoryID` (`TerritoryID` ASC),
  CONSTRAINT `FK_Customer_Person_PersonID`
    FOREIGN KEY (`PersonID`)
    REFERENCES `AdventureWorks2014`.`Person` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Customer_Store_StoreID`
    FOREIGN KEY (`StoreID`)
    REFERENCES `AdventureWorks2014`.`Store` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Customer_SalesTerritory_TerritoryID`
    FOREIGN KEY (`TerritoryID`)
    REFERENCES `AdventureWorks2014`.`SalesTerritory` (`TerritoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Current customer information. Also see the Person and Store tables.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesOrderDetail
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesOrderDetail` (
  `SalesOrderID` INT NOT NULL COMMENT 'Primary key. Foreign key to SalesOrderHeader.SalesOrderID.',
  `SalesOrderDetailID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key. One incremental unique number per product sold.',
  `CarrierTrackingNumber` VARCHAR(25) CHARACTER SET 'utf8mb4' NULL COMMENT 'Shipment tracking number supplied by the shipper.',
  `OrderQty` SMALLINT NOT NULL COMMENT 'Quantity ordered per product.',
  `ProductID` INT NOT NULL COMMENT 'Product sold to customer. Foreign key to Product.ProductID.',
  `SpecialOfferID` INT NOT NULL COMMENT 'Promotional code. Foreign key to SpecialOffer.SpecialOfferID.',
  `UnitPrice` DECIMAL(19,4) NOT NULL COMMENT 'Selling price of a single product.',
  `UnitPriceDiscount` DECIMAL(19,4) NOT NULL DEFAULT 0.0 COMMENT 'Discount amount.',
  `LineTotal` DECIMAL(38,6) NOT NULL COMMENT 'Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`SalesOrderDetailID`, `SalesOrderID`),
  UNIQUE INDEX `AK_SalesOrderDetail_rowguid` (`rowguid` ASC),
  INDEX `IX_SalesOrderDetail_ProductID` (`ProductID` ASC),
  CONSTRAINT `FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID`
    FOREIGN KEY (`SalesOrderID`)
    REFERENCES `AdventureWorks2014`.`SalesOrderHeader` (`SalesOrderID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID`
    FOREIGN KEY (`SpecialOfferID` , `ProductID`)
    REFERENCES `AdventureWorks2014`.`SpecialOfferProduct` (`SpecialOfferID` , `ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Individual products associated with a specific sales order. See SalesOrderHeader.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesOrderHeader
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesOrderHeader` (
  `SalesOrderID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key.',
  `RevisionNumber` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Incremental number to track changes to the sales order over time.',
  `OrderDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Dates the sales order was created.',
  `DueDate` DATETIME(6) NOT NULL COMMENT 'Date the order is due to the customer.',
  `ShipDate` DATETIME(6) NULL COMMENT 'Date the order was shipped to the customer.',
  `Status` TINYINT UNSIGNED NOT NULL DEFAULT 1 COMMENT 'Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled',
  `OnlineOrderFlag` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Order placed by sales person. 1 = Order placed online by customer.',
  `SalesOrderNumber` VARCHAR(25) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Unique sales order identification number.',
  `PurchaseOrderNumber` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL COMMENT 'Customer purchase order number reference. ',
  `AccountNumber` VARCHAR(30) CHARACTER SET 'utf8mb4' NULL COMMENT 'Financial accounting number reference.',
  `CustomerID` INT NOT NULL COMMENT 'Customer identification number. Foreign key to Customer.BusinessEntityID.',
  `SalesPersonID` INT NULL COMMENT 'Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.',
  `TerritoryID` INT NULL COMMENT 'Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.',
  `BillToAddressID` INT NOT NULL COMMENT 'Customer billing address. Foreign key to Address.AddressID.',
  `ShipToAddressID` INT NOT NULL COMMENT 'Customer shipping address. Foreign key to Address.AddressID.',
  `ShipMethodID` INT NOT NULL COMMENT 'Shipping method. Foreign key to ShipMethod.ShipMethodID.',
  `CreditCardID` INT NULL COMMENT 'Credit card identification number. Foreign key to CreditCard.CreditCardID.',
  `CreditCardApprovalCode` VARCHAR(15) NULL COMMENT 'Approval code provided by the credit card company.',
  `CurrencyRateID` INT NULL COMMENT 'Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.',
  `SubTotal` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.',
  `TaxAmt` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Tax amount.',
  `Freight` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Shipping cost.',
  `TotalDue` DECIMAL(19,4) NOT NULL COMMENT 'Total due from customer. Computed as Subtotal + TaxAmt + Freight.',
  `Comment` VARCHAR(128) CHARACTER SET 'utf8mb4' NULL COMMENT 'Sales representative comments.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`SalesOrderID`),
  UNIQUE INDEX `AK_SalesOrderHeader_rowguid` (`rowguid` ASC),
  UNIQUE INDEX `AK_SalesOrderHeader_SalesOrderNumber` (`SalesOrderNumber` ASC),
  INDEX `IX_SalesOrderHeader_CustomerID` (`CustomerID` ASC),
  INDEX `IX_SalesOrderHeader_SalesPersonID` (`SalesPersonID` ASC),
  CONSTRAINT `FK_SalesOrderHeader_Address_BillToAddressID`
    FOREIGN KEY (`BillToAddressID`)
    REFERENCES `AdventureWorks2014`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderHeader_Address_ShipToAddressID`
    FOREIGN KEY (`ShipToAddressID`)
    REFERENCES `AdventureWorks2014`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderHeader_CreditCard_CreditCardID`
    FOREIGN KEY (`CreditCardID`)
    REFERENCES `AdventureWorks2014`.`CreditCard` (`CreditCardID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderHeader_CurrencyRate_CurrencyRateID`
    FOREIGN KEY (`CurrencyRateID`)
    REFERENCES `AdventureWorks2014`.`CurrencyRate` (`CurrencyRateID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderHeader_Customer_CustomerID`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `AdventureWorks2014`.`Customer` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderHeader_SalesPerson_SalesPersonID`
    FOREIGN KEY (`SalesPersonID`)
    REFERENCES `AdventureWorks2014`.`SalesPerson` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderHeader_ShipMethod_ShipMethodID`
    FOREIGN KEY (`ShipMethodID`)
    REFERENCES `AdventureWorks2014`.`ShipMethod` (`ShipMethodID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderHeader_SalesTerritory_TerritoryID`
    FOREIGN KEY (`TerritoryID`)
    REFERENCES `AdventureWorks2014`.`SalesTerritory` (`TerritoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'General sales order information.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesOrderHeaderSalesReason
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesOrderHeaderSalesReason` (
  `SalesOrderID` INT NOT NULL COMMENT 'Primary key. Foreign key to SalesOrderHeader.SalesOrderID.',
  `SalesReasonID` INT NOT NULL COMMENT 'Primary key. Foreign key to SalesReason.SalesReasonID.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`SalesOrderID`, `SalesReasonID`),
  CONSTRAINT `FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID`
    FOREIGN KEY (`SalesReasonID`)
    REFERENCES `AdventureWorks2014`.`SalesReason` (`SalesReasonID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID`
    FOREIGN KEY (`SalesOrderID`)
    REFERENCES `AdventureWorks2014`.`SalesOrderHeader` (`SalesOrderID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping sales orders to sales reason codes.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesPerson
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesPerson` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID',
  `TerritoryID` INT NULL COMMENT 'Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.',
  `SalesQuota` DECIMAL(19,4) NULL COMMENT 'Projected yearly sales.',
  `Bonus` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Bonus due if quota is met.',
  `CommissionPct` DECIMAL(10,4) NOT NULL DEFAULT 0.00 COMMENT 'Commision percent received per sale.',
  `SalesYTD` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Sales total year to date.',
  `SalesLastYear` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Sales total of previous year.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`),
  UNIQUE INDEX `AK_SalesPerson_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_SalesPerson_Employee_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Employee` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesPerson_SalesTerritory_TerritoryID`
    FOREIGN KEY (`TerritoryID`)
    REFERENCES `AdventureWorks2014`.`SalesTerritory` (`TerritoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Sales representative current information.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesPersonQuotaHistory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesPersonQuotaHistory` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.',
  `QuotaDate` DATETIME(6) NOT NULL COMMENT 'Sales quota date.',
  `SalesQuota` DECIMAL(19,4) NOT NULL COMMENT 'Sales quota amount.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`, `QuotaDate`),
  UNIQUE INDEX `AK_SalesPersonQuotaHistory_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`SalesPerson` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Sales performance tracking.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesReason
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesReason` (
  `SalesReasonID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for SalesReason records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Sales reason description.',
  `ReasonType` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Category the sales reason belongs to.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`SalesReasonID`))
COMMENT = 'Lookup table of customer purchase reasons.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesTaxRate
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesTaxRate` (
  `SalesTaxRateID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for SalesTaxRate records.',
  `StateProvinceID` INT NOT NULL COMMENT 'State, province, or country/region the sales tax applies to.',
  `TaxType` TINYINT UNSIGNED NOT NULL COMMENT '1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.',
  `TaxRate` DECIMAL(10,4) NOT NULL DEFAULT 0.00 COMMENT 'Tax rate amount.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Tax rate description.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`SalesTaxRateID`),
  UNIQUE INDEX `AK_SalesTaxRate_StateProvinceID_TaxType` (`StateProvinceID` ASC, `TaxType` ASC),
  UNIQUE INDEX `AK_SalesTaxRate_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_SalesTaxRate_StateProvince_StateProvinceID`
    FOREIGN KEY (`StateProvinceID`)
    REFERENCES `AdventureWorks2014`.`StateProvince` (`StateProvinceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Tax rate lookup table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.PersonCreditCard
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`PersonCreditCard` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Business entity identification number. Foreign key to Person.BusinessEntityID.',
  `CreditCardID` INT NOT NULL COMMENT 'Credit card identification number. Foreign key to CreditCard.CreditCardID.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`, `CreditCardID`),
  CONSTRAINT `FK_PersonCreditCard_Person_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`Person` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_PersonCreditCard_CreditCard_CreditCardID`
    FOREIGN KEY (`CreditCardID`)
    REFERENCES `AdventureWorks2014`.`CreditCard` (`CreditCardID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Cross-reference table mapping people to their credit card information in the CreditCard table. ';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesTerritory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesTerritory` (
  `TerritoryID` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary key for SalesTerritory records.',
  `Name` VARCHAR(100) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Sales territory description',
  `CountryRegionCode` VARCHAR(3) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. ',
  `Group` VARCHAR(50) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Geographic area to which the sales territory belong.',
  `SalesYTD` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Sales in the territory year to date.',
  `SalesLastYear` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Sales in the territory the previous year.',
  `CostYTD` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Business costs in the territory year to date.',
  `CostLastYear` DECIMAL(19,4) NOT NULL DEFAULT 0.00 COMMENT 'Business costs in the territory the previous year.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`TerritoryID`),
  UNIQUE INDEX `AK_SalesTerritory_Name` (`Name` ASC),
  UNIQUE INDEX `AK_SalesTerritory_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_SalesTerritory_CountryRegion_CountryRegionCode`
    FOREIGN KEY (`CountryRegionCode`)
    REFERENCES `AdventureWorks2014`.`CountryRegion` (`CountryRegionCode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Sales territory lookup table.';

-- ----------------------------------------------------------------------------
-- Table AdventureWorks2014.SalesTerritoryHistory
-- ----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`SalesTerritoryHistory` (
  `BusinessEntityID` INT NOT NULL COMMENT 'Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.',
  `TerritoryID` INT NOT NULL COMMENT 'Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.',
  `StartDate` DATETIME(6) NOT NULL COMMENT 'Primary key. Date the sales representive started work in the territory.',
  `EndDate` DATETIME(6) NULL COMMENT 'Date the sales representative left work in the territory.',
  `rowguid` VARCHAR(64) UNIQUE NOT NULL COMMENT 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.',
  `ModifiedDate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time the record was last updated.',
  PRIMARY KEY (`BusinessEntityID`, `StartDate`, `TerritoryID`),
  UNIQUE INDEX `AK_SalesTerritoryHistory_rowguid` (`rowguid` ASC),
  CONSTRAINT `FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID`
    FOREIGN KEY (`BusinessEntityID`)
    REFERENCES `AdventureWorks2014`.`SalesPerson` (`BusinessEntityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SalesTerritoryHistory_SalesTerritory_TerritoryID`
    FOREIGN KEY (`TerritoryID`)
    REFERENCES `AdventureWorks2014`.`SalesTerritory` (`TerritoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'Sales representative transfers to other sales territories.';

CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`user` (
  `username` varchar(45) NOT NULL,
  `password` varchar(45) NOT NULL,
  `enabled` tinyint(4) NOT NULL DEFAULT '1',
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE IF NOT EXISTS `AdventureWorks2014`.`user_role` (
  `user_role_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(45) NOT NULL,
  `role` varchar(45) NOT NULL,
  PRIMARY KEY (`user_role_id`),
  UNIQUE KEY `uni_username_role` (`role`,`username`),
  KEY `fk_username_idx` (`username`),
  CONSTRAINT `fk_username` FOREIGN KEY (`username`) REFERENCES `user` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.dEmployee
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [HumanResources].[dEmployee] ON [HumanResources].[Employee] 

-- INSTEAD OF DELETE NOT FOR REPLICATION AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN

--         RAISERROR

--             (N'Employees cannot be deleted. They can only be marked as not current.', -- Message

--             10, -- Severity.

--             1); -- State.

-- 

--         -- Rollback any active or uncommittable transactions

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

--     END;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.iuPerson
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Person].[iuPerson] ON [Person].[Person] 

-- AFTER INSERT, UPDATE NOT FOR REPLICATION AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     IF UPDATE([BusinessEntityID]) OR UPDATE([Demographics]) 

--     BEGIN

--         UPDATE [Person].[Person] 

--         SET [Person].[Person].[Demographics] = N'<IndividualSurvey xmlns="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"> 

--             <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 

--             </IndividualSurvey>' 

--         FROM inserted 

--         WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 

--             AND inserted.[Demographics] IS NULL;

--         

--         UPDATE [Person].[Person] 

--         SET [Demographics].modify(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 

--             insert <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 

--             as first 

--             into (/IndividualSurvey)[1]') 

--         FROM inserted 

--         WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 

--             AND inserted.[Demographics] IS NOT NULL 

--             AND inserted.[Demographics].exist(N'declare default element namespace 

--                 "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 

--                 /IndividualSurvey/TotalPurchaseYTD') <> 1;

--     END;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.iWorkOrder
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Production].[iWorkOrder] ON [Production].[WorkOrder] 

-- AFTER INSERT AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN TRY

--         INSERT INTO [Production].[TransactionHistory](

--             [ProductID]

--             ,[ReferenceOrderID]

--             ,[TransactionType]

--             ,[TransactionDate]

--             ,[Quantity]

--             ,[ActualCost])

--         SELECT 

--             inserted.[ProductID]

--             ,inserted.[WorkOrderID]

--             ,'W'

--             ,GETDATE()

--             ,inserted.[OrderQty]

--             ,0

--         FROM inserted;

--     END TRY

--     BEGIN CATCH

--         EXECUTE [dbo].[uspPrintError];

-- 

--         -- Rollback any active or uncommittable transactions before

--         -- inserting information in the ErrorLog

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

-- 

--         EXECUTE [dbo].[uspLogError];

--     END CATCH;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.uWorkOrder
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Production].[uWorkOrder] ON [Production].[WorkOrder] 

-- AFTER UPDATE AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN TRY

--         IF UPDATE([ProductID]) OR UPDATE([OrderQty])

--         BEGIN

--             INSERT INTO [Production].[TransactionHistory](

--                 [ProductID]

--                 ,[ReferenceOrderID]

--                 ,[TransactionType]

--                 ,[TransactionDate]

--                 ,[Quantity])

--             SELECT 

--                 inserted.[ProductID]

--                 ,inserted.[WorkOrderID]

--                 ,'W'

--                 ,GETDATE()

--                 ,inserted.[OrderQty]

--             FROM inserted;

--         END;

--     END TRY

--     BEGIN CATCH

--         EXECUTE [dbo].[uspPrintError];

-- 

--         -- Rollback any active or uncommittable transactions before

--         -- inserting information in the ErrorLog

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

-- 

--         EXECUTE [dbo].[uspLogError];

--     END CATCH;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.dVendor
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Purchasing].[dVendor] ON [Purchasing].[Vendor] 

-- INSTEAD OF DELETE NOT FOR REPLICATION AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN TRY

--         DECLARE @DeleteCount int;

-- 

--         SELECT @DeleteCount = COUNT(*) FROM deleted;

--         IF @DeleteCount > 0 

--         BEGIN

--             RAISERROR

--                 (N'Vendors cannot be deleted. They can only be marked as not active.', -- Message

--                 10, -- Severity.

--                 1); -- State.

-- 

--         -- Rollback any active or uncommittable transactions

--             IF @@TRANCOUNT > 0

--             BEGIN

--                 ROLLBACK TRANSACTION;

--             END

--         END;

--     END TRY

--     BEGIN CATCH

--         EXECUTE [dbo].[uspPrintError];

-- 

--         -- Rollback any active or uncommittable transactions before

--         -- inserting information in the ErrorLog

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

-- 

--         EXECUTE [dbo].[uspLogError];

--     END CATCH;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.iPurchaseOrderDetail
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Purchasing].[iPurchaseOrderDetail] ON [Purchasing].[PurchaseOrderDetail] 

-- AFTER INSERT AS

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN TRY

--         INSERT INTO [Production].[TransactionHistory]

--             ([ProductID]

--             ,[ReferenceOrderID]

--             ,[ReferenceOrderLineID]

--             ,[TransactionType]

--             ,[TransactionDate]

--             ,[Quantity]

--             ,[ActualCost])

--         SELECT 

--             inserted.[ProductID]

--             ,inserted.[PurchaseOrderID]

--             ,inserted.[PurchaseOrderDetailID]

--             ,'P'

--             ,GETDATE()

--             ,inserted.[OrderQty]

--             ,inserted.[UnitPrice]

--         FROM inserted 

--             INNER JOIN [Purchasing].[PurchaseOrderHeader] 

--             ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID];

-- 

--         -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 

--         -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.

--         UPDATE [Purchasing].[PurchaseOrderHeader]

--         SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 

--             (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])

--                 FROM [Purchasing].[PurchaseOrderDetail]

--                 WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])

--         WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN (SELECT inserted.[PurchaseOrderID] FROM inserted);

--     END TRY

--     BEGIN CATCH

--         EXECUTE [dbo].[uspPrintError];

-- 

--         -- Rollback any active or uncommittable transactions before

--         -- inserting information in the ErrorLog

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

-- 

--         EXECUTE [dbo].[uspLogError];

--     END CATCH;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.uPurchaseOrderDetail
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Purchasing].[uPurchaseOrderDetail] ON [Purchasing].[PurchaseOrderDetail] 

-- AFTER UPDATE AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN TRY

--         IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice])

--         -- Insert record into TransactionHistory 

--         BEGIN

--             INSERT INTO [Production].[TransactionHistory]

--                 ([ProductID]

--                 ,[ReferenceOrderID]

--                 ,[ReferenceOrderLineID]

--                 ,[TransactionType]

--                 ,[TransactionDate]

--                 ,[Quantity]

--                 ,[ActualCost])

--             SELECT 

--                 inserted.[ProductID]

--                 ,inserted.[PurchaseOrderID]

--                 ,inserted.[PurchaseOrderDetailID]

--                 ,'P'

--                 ,GETDATE()

--                 ,inserted.[OrderQty]

--                 ,inserted.[UnitPrice]

--             FROM inserted 

--                 INNER JOIN [Purchasing].[PurchaseOrderDetail] 

--                 ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID];

-- 

--             -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 

--             -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.

--             UPDATE [Purchasing].[PurchaseOrderHeader]

--             SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 

--                 (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])

--                     FROM [Purchasing].[PurchaseOrderDetail]

--                     WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 

--                         = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])

--             WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 

--                 IN (SELECT inserted.[PurchaseOrderID] FROM inserted);

-- 

--             UPDATE [Purchasing].[PurchaseOrderDetail]

--             SET [Purchasing].[PurchaseOrderDetail].[ModifiedDate] = GETDATE()

--             FROM inserted

--             WHERE inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID]

--                 AND inserted.[PurchaseOrderDetailID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderDetailID];

--         END;

--     END TRY

--     BEGIN CATCH

--         EXECUTE [dbo].[uspPrintError];

-- 

--         -- Rollback any active or uncommittable transactions before

--         -- inserting information in the ErrorLog

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

-- 

--         EXECUTE [dbo].[uspLogError];

--     END CATCH;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.uPurchaseOrderHeader
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Purchasing].[uPurchaseOrderHeader] ON [Purchasing].[PurchaseOrderHeader] 

-- AFTER UPDATE AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN TRY

--         -- Update RevisionNumber for modification of any field EXCEPT the Status.

--         IF NOT UPDATE([Status])

--         BEGIN

--             UPDATE [Purchasing].[PurchaseOrderHeader]

--             SET [Purchasing].[PurchaseOrderHeader].[RevisionNumber] = 

--                 [Purchasing].[PurchaseOrderHeader].[RevisionNumber] + 1

--             WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN 

--                 (SELECT inserted.[PurchaseOrderID] FROM inserted);

--         END;

--     END TRY

--     BEGIN CATCH

--         EXECUTE [dbo].[uspPrintError];

-- 

--         -- Rollback any active or uncommittable transactions before

--         -- inserting information in the ErrorLog

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

-- 

--         EXECUTE [dbo].[uspLogError];

--     END CATCH;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.iduSalesOrderDetail
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Sales].[iduSalesOrderDetail] ON [Sales].[SalesOrderDetail] 

-- AFTER INSERT, DELETE, UPDATE AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN TRY

--         -- If inserting or updating these columns

--         IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice]) OR UPDATE([UnitPriceDiscount]) 

--         -- Insert record into TransactionHistory

--         BEGIN

--             INSERT INTO [Production].[TransactionHistory]

--                 ([ProductID]

--                 ,[ReferenceOrderID]

--                 ,[ReferenceOrderLineID]

--                 ,[TransactionType]

--                 ,[TransactionDate]

--                 ,[Quantity]

--                 ,[ActualCost])

--             SELECT 

--                 inserted.[ProductID]

--                 ,inserted.[SalesOrderID]

--                 ,inserted.[SalesOrderDetailID]

--                 ,'S'

--                 ,GETDATE()

--                 ,inserted.[OrderQty]

--                 ,inserted.[UnitPrice]

--             FROM inserted 

--                 INNER JOIN [Sales].[SalesOrderHeader] 

--                 ON inserted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID];

-- 

--             UPDATE [Person].[Person] 

--             SET [Demographics].modify('declare default element namespace 

--                 "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 

--                 replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 

--                 with data(/IndividualSurvey/TotalPurchaseYTD)[1] + sql:column ("inserted.LineTotal")') 

--             FROM inserted 

--                 INNER JOIN [Sales].[SalesOrderHeader] AS SOH

--                 ON inserted.[SalesOrderID] = SOH.[SalesOrderID] 

--                 INNER JOIN [Sales].[Customer] AS C

--                 ON SOH.[CustomerID] = C.[CustomerID]

--             WHERE C.[PersonID] = [Person].[Person].[BusinessEntityID];

--         END;

-- 

--         -- Update SubTotal in SalesOrderHeader record. Note that this causes the 

--         -- SalesOrderHeader trigger to fire which will update the RevisionNumber.

--         UPDATE [Sales].[SalesOrderHeader]

--         SET [Sales].[SalesOrderHeader].[SubTotal] = 

--             (SELECT SUM([Sales].[SalesOrderDetail].[LineTotal])

--                 FROM [Sales].[SalesOrderDetail]

--                 WHERE [Sales].[SalesOrderHeader].[SalesOrderID] = [Sales].[SalesOrderDetail].[SalesOrderID])

--         WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN (SELECT inserted.[SalesOrderID] FROM inserted);

-- 

--         UPDATE [Person].[Person] 

--         SET [Demographics].modify('declare default element namespace 

--             "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 

--             replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 

--             with data(/IndividualSurvey/TotalPurchaseYTD)[1] - sql:column("deleted.LineTotal")') 

--         FROM deleted 

--             INNER JOIN [Sales].[SalesOrderHeader] 

--             ON deleted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] 

--             INNER JOIN [Sales].[Customer]

--             ON [Sales].[Customer].[CustomerID] = [Sales].[SalesOrderHeader].[CustomerID]

--         WHERE [Sales].[Customer].[PersonID] = [Person].[Person].[BusinessEntityID];

--     END TRY

--     BEGIN CATCH

--         EXECUTE [dbo].[uspPrintError];

-- 

--         -- Rollback any active or uncommittable transactions before

--         -- inserting information in the ErrorLog

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

-- 

--         EXECUTE [dbo].[uspLogError];

--     END CATCH;

-- END;

-- ;

-- ----------------------------------------------------------------------------
-- Trigger AdventureWorks2014.uSalesOrderHeader
-- ----------------------------------------------------------------------------
-- DELIMITER $$
-- USE `AdventureWorks2014`$$
-- 

-- CREATE TRIGGER [Sales].[uSalesOrderHeader] ON [Sales].[SalesOrderHeader] 

-- AFTER UPDATE NOT FOR REPLICATION AS 

-- BEGIN

--     DECLARE @Count int;

-- 

--     SET @Count = @@ROWCOUNT;

--     IF @Count = 0 

--         RETURN;

-- 

--     SET NOCOUNT ON;

-- 

--     BEGIN TRY

--         -- Update RevisionNumber for modification of any field EXCEPT the Status.

--         IF NOT UPDATE([Status])

--         BEGIN

--             UPDATE [Sales].[SalesOrderHeader]

--             SET [Sales].[SalesOrderHeader].[RevisionNumber] = 

--                 [Sales].[SalesOrderHeader].[RevisionNumber] + 1

--             WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN 

--                 (SELECT inserted.[SalesOrderID] FROM inserted);

--         END;

-- 

--         -- Update the SalesPerson SalesYTD when SubTotal is updated

--         IF UPDATE([SubTotal])

--         BEGIN

--             DECLARE @StartDate datetime,

--                     @EndDate datetime

-- 

--             SET @StartDate = [dbo].[ufnGetAccountingStartDate]();

--             SET @EndDate = [dbo].[ufnGetAccountingEndDate]();

-- 

--             UPDATE [Sales].[SalesPerson]

--             SET [Sales].[SalesPerson].[SalesYTD] = 

--                 (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])

--                 FROM [Sales].[SalesOrderHeader] 

--                 WHERE [Sales].[SalesPerson].[BusinessEntityID] = [Sales].[SalesOrderHeader].[SalesPersonID]

--                     AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped

--                     AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)

--             WHERE [Sales].[SalesPerson].[BusinessEntityID] 

--                 IN (SELECT DISTINCT inserted.[SalesPersonID] FROM inserted 

--                     WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);

-- 

--             -- Update the SalesTerritory SalesYTD when SubTotal is updated

--             UPDATE [Sales].[SalesTerritory]

--             SET [Sales].[SalesTerritory].[SalesYTD] = 

--                 (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])

--                 FROM [Sales].[SalesOrderHeader] 

--                 WHERE [Sales].[SalesTerritory].[TerritoryID] = [Sales].[SalesOrderHeader].[TerritoryID]

--                     AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped

--                     AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)

--             WHERE [Sales].[SalesTerritory].[TerritoryID] 

--                 IN (SELECT DISTINCT inserted.[TerritoryID] FROM inserted 

--                     WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);

--         END;

--     END TRY

--     BEGIN CATCH

--         EXECUTE [dbo].[uspPrintError];

-- 

--         -- Rollback any active or uncommittable transactions before

--         -- inserting information in the ErrorLog

--         IF @@TRANCOUNT > 0

--         BEGIN

--             ROLLBACK TRANSACTION;

--         END

-- 

--         EXECUTE [dbo].[uspLogError];

--     END CATCH;

-- END;

-- ;
SET FOREIGN_KEY_CHECKS = 1;
